version: "3.8"

services:
    # Reverse Proxy / Load Balancer
    traefik:
        image: traefik:v3.0
        container_name: mcpai-traefik
        command:
            - "--api.dashboard=true"
            - "--providers.docker=true"
            - "--providers.docker.exposedbydefault=false"
            - "--entrypoints.web.address=:80"
            - "--entrypoints.websecure.address=:443"
            - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
            - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
            - "--certificatesresolvers.myresolver.acme.email=${ACME_EMAIL}"
            - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
            - "--global.checknewversion=false"
            - "--global.sendanonymoususage=false"
            - "--log.level=INFO"
            - "--accesslog=true"
        ports:
            - "80:80"
            - "443:443"
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro
            - traefik_letsencrypt:/letsencrypt
        networks:
            - mcpai-network
            - web
        restart: unless-stopped
        security_opt:
            - no-new-privileges:true
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.dashboard.rule=Host(`traefik.${DOMAIN}`)"
            - "traefik.http.routers.dashboard.tls=true"
            - "traefik.http.routers.dashboard.tls.certresolver=myresolver"
            - "traefik.http.routers.dashboard.service=api@internal"
            - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_AUTH}"

    # Main API Service
    mcp-api:
        image: ${REGISTRY}/mcpai-api:${VERSION:-latest}
        container_name: mcpai-api
        environment:
            - ENVIRONMENT=production
            - LOG_LEVEL=INFO
            - DATABASE_URL=${DATABASE_URL}
            - REDIS_URL=${REDIS_URL}
            - SECRET_KEY=${SECRET_KEY}
            - CORS_ORIGINS=${CORS_ORIGINS}
        volumes:
            - api_logs:/app/logs
        networks:
            - mcpai-network
        restart: unless-stopped
        user: "1000:1000"
        security_opt:
            - no-new-privileges:true
        read_only: true
        tmpfs:
            - /tmp:noexec,nosuid,size=100m
        deploy:
            replicas: ${API_REPLICAS:-2}
            resources:
                limits:
                    cpus: "1.0"
                    memory: 1G
                reservations:
                    cpus: "0.5"
                    memory: 512M
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.api.rule=Host(`api.${DOMAIN}`)"
            - "traefik.http.routers.api.tls=true"
            - "traefik.http.routers.api.tls.certresolver=myresolver"
            - "traefik.http.services.api.loadbalancer.server.port=8000"
            - "traefik.http.middlewares.api-ratelimit.ratelimit.burst=100"
            - "traefik.http.middlewares.api-ratelimit.ratelimit.average=50"

    # Model Runner Service
    model-runner:
        image: ${REGISTRY}/mcpai-model-runner:${VERSION:-latest}
        container_name: mcpai-model-runner
        environment:
            - ENVIRONMENT=production
            - LOG_LEVEL=INFO
            - GPU_MEMORY_FRACTION=${GPU_MEMORY_FRACTION:-0.8}
            - NVIDIA_VISIBLE_DEVICES=${CUDA_DEVICES:-0}
        volumes:
            - model_cache:/app/models
            - runner_logs:/app/logs
        networks:
            - mcpai-network
        restart: unless-stopped
        user: "1000:1000"
        security_opt:
            - no-new-privileges:true
        deploy:
            resources:
                limits:
                    cpus: "4.0"
                    memory: 8G
                reservations:
                    cpus: "2.0"
                    memory: 4G
        runtime: nvidia
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
            interval: 30s
            timeout: 15s
            retries: 3
            start_period: 60s

    # Database
    postgres:
        image: postgres:15-alpine
        container_name: mcpai-postgres
        environment:
            - POSTGRES_DB=${POSTGRES_DB}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
        volumes:
            - postgres_data:/var/lib/postgresql/data
            - postgres_logs:/var/log/postgresql
        networks:
            - mcpai-network
        restart: unless-stopped
        security_opt:
            - no-new-privileges:true
        deploy:
            resources:
                limits:
                    cpus: "2.0"
                    memory: 4G
                reservations:
                    cpus: "1.0"
                    memory: 2G
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s

    # Redis Cache
    redis:
        image: redis:7-alpine
        container_name: mcpai-redis
        command: >
            redis-server
            --requirepass ${REDIS_PASSWORD}
            --maxmemory 1gb
            --maxmemory-policy allkeys-lru
            --save 900 1
            --save 300 10
            --save 60 10000
        volumes:
            - redis_data:/data
        networks:
            - mcpai-network
        restart: unless-stopped
        security_opt:
            - no-new-privileges:true
        deploy:
            resources:
                limits:
                    cpus: "1.0"
                    memory: 1G
                reservations:
                    cpus: "0.5"
                    memory: 512M
        healthcheck:
            test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
            interval: 30s
            timeout: 10s
            retries: 3

    # Monitoring Stack
    prometheus:
        image: prom/prometheus:v2.48.0
        container_name: mcpai-prometheus
        command:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus"
            - "--web.console.libraries=/etc/prometheus/console_libraries"
            - "--web.console.templates=/etc/prometheus/consoles"
            - "--storage.tsdb.retention.time=30d"
            - "--web.enable-lifecycle"
            - "--alertmanager.url=http://alertmanager:9093"
        volumes:
            - ../prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
            - ../prometheus/rules:/etc/prometheus/rules:ro
            - prometheus_data:/prometheus
        networks:
            - mcpai-network
        restart: unless-stopped
        user: "65534:65534"
        security_opt:
            - no-new-privileges:true
        deploy:
            resources:
                limits:
                    cpus: "2.0"
                    memory: 4G
                reservations:
                    cpus: "1.0"
                    memory: 2G
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.prometheus.rule=Host(`prometheus.${DOMAIN}`)"
            - "traefik.http.routers.prometheus.tls=true"
            - "traefik.http.routers.prometheus.tls.certresolver=myresolver"
            - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

    alertmanager:
        image: prom/alertmanager:v0.26.0
        container_name: mcpai-alertmanager
        command:
            - "--config.file=/etc/alertmanager/alertmanager.yml"
            - "--storage.path=/alertmanager"
            - "--web.external-url=https://alertmanager.${DOMAIN}"
            - "--web.route-prefix=/"
        volumes:
            - ../prometheus/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
            - alertmanager_data:/alertmanager
        networks:
            - mcpai-network
        restart: unless-stopped
        user: "65534:65534"
        security_opt:
            - no-new-privileges:true
        environment:
            - SMTP_HOST=${SMTP_HOST}
            - SMTP_FROM=${SMTP_FROM}
            - SMTP_USER=${SMTP_USER}
            - SMTP_PASSWORD=${SMTP_PASSWORD}
            - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
            - DEFAULT_EMAIL=${DEFAULT_EMAIL}
            - CRITICAL_EMAIL=${CRITICAL_EMAIL}
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.alertmanager.rule=Host(`alertmanager.${DOMAIN}`)"
            - "traefik.http.routers.alertmanager.tls=true"
            - "traefik.http.routers.alertmanager.tls.certresolver=myresolver"
            - "traefik.http.services.alertmanager.loadbalancer.server.port=9093"

    grafana:
        image: grafana/grafana:10.2.0
        container_name: mcpai-grafana
        environment:
            - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
            - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
            - GF_USERS_ALLOW_SIGN_UP=false
            - GF_SERVER_DOMAIN=${DOMAIN}
            - GF_SERVER_ROOT_URL=https://grafana.${DOMAIN}
            - GF_SECURITY_COOKIE_SECURE=true
            - GF_SECURITY_STRICT_TRANSPORT_SECURITY=true
        volumes:
            - grafana_data:/var/lib/grafana
            - ../grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
            - ../grafana/datasources:/etc/grafana/provisioning/datasources:ro
        networks:
            - mcpai-network
        restart: unless-stopped
        user: "472:472"
        security_opt:
            - no-new-privileges:true
        deploy:
            resources:
                limits:
                    cpus: "1.0"
                    memory: 2G
                reservations:
                    cpus: "0.5"
                    memory: 1G
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN}`)"
            - "traefik.http.routers.grafana.tls=true"
            - "traefik.http.routers.grafana.tls.certresolver=myresolver"
            - "traefik.http.services.grafana.loadbalancer.server.port=3000"

    # Log Aggregation
    loki:
        image: grafana/loki:2.9.0
        container_name: mcpai-loki
        command: -config.file=/etc/loki/local-config.yaml
        volumes:
            - ../loki/local-config.yaml:/etc/loki/local-config.yaml:ro
            - loki_data:/loki
        networks:
            - mcpai-network
        restart: unless-stopped
        user: "10001:10001"
        security_opt:
            - no-new-privileges:true
        deploy:
            resources:
                limits:
                    cpus: "2.0"
                    memory: 4G
                reservations:
                    cpus: "1.0"
                    memory: 2G

    # Log Shipper
    promtail:
        image: grafana/promtail:2.9.0
        container_name: mcpai-promtail
        command: -config.file=/etc/promtail/config.yml
        volumes:
            - ../promtail/config.yml:/etc/promtail/config.yml:ro
            - /var/log:/var/log:ro
            - api_logs:/var/log/api:ro
            - runner_logs:/var/log/runner:ro
            - postgres_logs:/var/log/postgres:ro
        networks:
            - mcpai-network
        restart: unless-stopped
        security_opt:
            - no-new-privileges:true

networks:
    mcpai-network:
        driver: bridge
        ipam:
            config:
                - subnet: 172.20.0.0/16
    web:
        external: true

volumes:
    traefik_letsencrypt:
        driver: local
    postgres_data:
        driver: local
    redis_data:
        driver: local
    model_cache:
        driver: local
    prometheus_data:
        driver: local
    alertmanager_data:
        driver: local
    grafana_data:
        driver: local
    loki_data:
        driver: local
    api_logs:
        driver: local
    runner_logs:
        driver: local
    postgres_logs:
        driver: local
