name: CI - Cross-Platform Testing

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Platform-specific builds and tests
  cross-platform-test:
    name: Test on ${{ matrix.os }} (${{ matrix.platform }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux tests (AMD64)
          - os: ubuntu-latest
            platform: linux
            docker_platform: linux/amd64
            compose_file: docker-compose.linux.yml
            test_target: test-linux
            setup_script: ./scripts/setup-environment.sh

          # macOS tests (ARM64 for Apple Silicon)
          - os: macos-latest
            platform: macos
            docker_platform: linux/arm64
            compose_file: docker-compose.macos.yml
            test_target: test-macos
            setup_script: ./scripts/setup-environment.sh

          # Windows tests (AMD64 with WSL2)
          - os: windows-latest
            platform: windows
            docker_platform: linux/amd64
            compose_file: docker-compose.windows.yml
            test_target: test-windows
            setup_script: .\scripts\setup-environment.ps1

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ matrix.docker_platform }}

      - name: Setup environment variables
        shell: bash
        run: |
          echo "DOCKER_PLATFORM=${{ matrix.docker_platform }}" >> $GITHUB_ENV
          echo "DETECTED_OS=${{ matrix.platform }}" >> $GITHUB_ENV

      # Platform-specific setup
      - name: Setup environment (Linux/macOS)
        if: matrix.platform != 'windows'
        shell: bash
        run: |
          chmod +x ${{ matrix.setup_script }}
          ${{ matrix.setup_script }}

      - name: Setup environment (Windows)
        if: matrix.platform == 'windows'
        shell: pwsh
        run: |
          ${{ matrix.setup_script }}

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build services
        shell: bash
        run: |
          if [ "${{ matrix.platform }}" = "windows" ]; then
            make build COMPOSE="docker compose -f compose/docker-compose.base.yml -f compose/${{ matrix.compose_file }}"
          else
            make build
          fi

      - name: Run platform-specific tests
        shell: bash
        run: |
          make ${{ matrix.test_target }}

      - name: Check service health
        shell: bash
        run: |
          make health-check

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.platform }}
          path: |
            test-results/
            logs/
            coverage/

  # Multi-platform build job
  multi-platform-build:
    name: Build Multi-Platform Images
    runs-on: ubuntu-latest
    needs: cross-platform-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha

      - name: Build and push multi-platform images
        uses: docker/bake-action@v4
        with:
          files: |
            ./docker-bake.hcl
          targets: default
          push: ${{ github.event_name != 'pull_request' }}
          set: |
            *.cache-from=type=gha
            *.cache-to=type=gha,mode=max
            *.platform=linux/amd64,linux/arm64

  # Code quality analysis
  sonarqube-analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: cross-platform-test
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-test.txt

      - name: Run tests with coverage
        run: |
          pytest --cov=services --cov-report=xml --cov-report=html

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Security scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: multi-platform-build
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Docker Scout
        if: github.event_name != 'pull_request'
        uses: docker/scout-action@v1
        with:
          command: cves
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  # Platform compatibility matrix
  compatibility-matrix:
    name: Platform Compatibility Check
    runs-on: ubuntu-latest
    needs: [cross-platform-test, sonarqube-analysis]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate compatibility report
        run: |
          echo "# Platform Compatibility Report" > compatibility-report.md
          echo "Generated on: $(date)" >> compatibility-report.md
          echo "" >> compatibility-report.md
          echo "## Tested Platforms" >> compatibility-report.md
          echo "- ✅ Linux (Ubuntu latest) - AMD64" >> compatibility-report.md
          echo "- ✅ macOS (latest) - ARM64" >> compatibility-report.md
          echo "- ✅ Windows (latest) - AMD64 with WSL2" >> compatibility-report.md
          echo "" >> compatibility-report.md
          echo "## Docker Platform Support" >> compatibility-report.md
          echo "- linux/amd64: ✅ Fully supported" >> compatibility-report.md
          echo "- linux/arm64: ✅ Fully supported" >> compatibility-report.md
          echo "" >> compatibility-report.md
          echo "All tests passed successfully across all platforms." >> compatibility-report.md

      - name: Upload compatibility report
        uses: actions/upload-artifact@v4
        with:
          name: compatibility-report
          path: compatibility-report.md
