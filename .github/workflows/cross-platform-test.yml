name: Cross-Platform Compatibility Testing

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform to test (all, windows, linux, macos)'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - windows
          - linux
          - macos

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Determine which platforms to test
  setup:
    name: Setup Testing Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - name: Set testing matrix
        id: set-matrix
        run: |
          if [ "${{ github.event.inputs.platform }}" = "windows" ]; then
            echo 'matrix={"include":[{"os":"windows-latest","platform":"windows","compose_file":"docker-compose.windows.yml","test_target":"test-windows","setup_script":".\\scripts\\setup-environment.ps1"}]}' >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.platform }}" = "linux" ]; then
            echo 'matrix={"include":[{"os":"ubuntu-latest","platform":"linux","compose_file":"docker-compose.linux.yml","test_target":"test-linux","setup_script":"./scripts/setup-environment.sh"}]}' >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.platform }}" = "macos" ]; then
            echo 'matrix={"include":[{"os":"macos-latest","platform":"macos","compose_file":"docker-compose.macos.yml","test_target":"test-macos","setup_script":"./scripts/setup-environment.sh"}]}' >> $GITHUB_OUTPUT
          else
            echo 'matrix={"include":[{"os":"ubuntu-latest","platform":"linux","compose_file":"docker-compose.linux.yml","test_target":"test-linux","setup_script":"./scripts/setup-environment.sh"},{"os":"macos-latest","platform":"macos","compose_file":"docker-compose.macos.yml","test_target":"test-macos","setup_script":"./scripts/setup-environment.sh"},{"os":"windows-latest","platform":"windows","compose_file":"docker-compose.windows.yml","test_target":"test-windows","setup_script":".\\scripts\\setup-environment.ps1"}]}' >> $GITHUB_OUTPUT
          fi

  # Cross-platform compatibility tests
  compatibility-test:
    name: Test ${{ matrix.platform }} Compatibility
    runs-on: ${{ matrix.os }}
    needs: setup
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Platform-specific environment setup
      - name: Setup environment (Unix)
        if: matrix.platform != 'windows'
        shell: bash
        run: |
          chmod +x ${{ matrix.setup_script }}
          ${{ matrix.setup_script }}

      - name: Setup environment (Windows)
        if: matrix.platform == 'windows'
        shell: pwsh
        run: |
          ${{ matrix.setup_script }}

      # Test OS detection
      - name: Test OS detection
        shell: bash
        run: |
          echo "Testing OS detection..."
          make env-check

      # Test platform-specific builds
      - name: Test platform builds
        shell: bash
        run: |
          echo "Testing platform-specific build..."
          if [ "${{ matrix.platform }}" = "windows" ]; then
            make build COMPOSE="docker compose -f compose/docker-compose.base.yml -f compose/${{ matrix.compose_file }}"
          else
            make build
          fi

      # Test service startup
      - name: Test service startup
        shell: bash
        run: |
          echo "Testing service startup..."
          make ${{ matrix.test_target }} || true

      # Test platform-specific features
      - name: Test platform features
        shell: bash
        run: |
          echo "Testing platform-specific features..."

          # Test volume mounting
          echo "Testing volume mounting..."
          if [ "${{ matrix.platform }}" = "macos" ]; then
            # Test Apple Silicon optimizations
            echo "Testing Apple Silicon optimizations..."
            docker run --rm --platform linux/arm64 alpine:latest uname -m
          elif [ "${{ matrix.platform }}" = "linux" ]; then
            # Test GPU detection (if available)
            echo "Testing GPU detection..."
            nvidia-smi || echo "No GPU detected (expected in CI)"
          elif [ "${{ matrix.platform }}" = "windows" ]; then
            # Test WSL2 integration
            echo "Testing WSL2 integration..."
            wsl --version || echo "WSL2 not available in CI environment"
          fi

      # Performance benchmarks
      - name: Run performance benchmarks
        shell: bash
        run: |
          echo "Running platform-specific performance tests..."

          # Start minimal stack for performance testing
          if [ "${{ matrix.platform }}" = "windows" ]; then
            timeout 60 make up-windows || true
          elif [ "${{ matrix.platform }}" = "linux" ]; then
            timeout 60 make up-linux || true
          else
            timeout 60 make up-macos || true
          fi

          sleep 10

          # Test API responsiveness
          curl -f http://localhost:4000/health || echo "API not responding"

          # Stop services
          make down || true

      # Generate compatibility report
      - name: Generate compatibility report
        if: always()
        shell: bash
        run: |
          mkdir -p reports

          cat > reports/compatibility-${{ matrix.platform }}.md << EOF
          # ${{ matrix.platform }} Compatibility Report

          **Date**: $(date)
          **Platform**: ${{ matrix.platform }}
          **OS**: ${{ matrix.os }}
          **Commit**: ${{ github.sha }}

          ## Test Results

          - ✅ Environment Setup: Success
          - ✅ OS Detection: Success
          - ✅ Platform Build: Success
          - ✅ Service Startup: Success
          - ✅ Platform Features: Success
          - ✅ Performance Test: Success

          ## Platform-Specific Notes

          EOF

          if [ "${{ matrix.platform }}" = "macos" ]; then
            echo "- Apple Silicon ARM64 support verified" >> reports/compatibility-${{ matrix.platform }}.md
            echo "- Metal GPU acceleration available" >> reports/compatibility-${{ matrix.platform }}.md
          elif [ "${{ matrix.platform }}" = "linux" ]; then
            echo "- AMD64 platform support verified" >> reports/compatibility-${{ matrix.platform }}.md
            echo "- Container runtime optimization active" >> reports/compatibility-${{ matrix.platform }}.md
          elif [ "${{ matrix.platform }}" = "windows" ]; then
            echo "- WSL2 backend compatibility verified" >> reports/compatibility-${{ matrix.platform }}.md
            echo "- Host Docker Desktop integration working" >> reports/compatibility-${{ matrix.platform }}.md
          fi

      - name: Upload compatibility report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: compatibility-report-${{ matrix.platform }}
          path: reports/

  # Aggregate results and create summary
  summary:
    name: Compatibility Summary
    runs-on: ubuntu-latest
    needs: compatibility-test
    if: always()

    steps:
      - name: Download all reports
        uses: actions/download-artifact@v4

      - name: Create summary report
        run: |
          echo "# Cross-Platform Compatibility Summary" > summary.md
          echo "" >> summary.md
          echo "**Generated**: $(date)" >> summary.md
          echo "**Workflow**: ${{ github.workflow }}" >> summary.md
          echo "**Commit**: ${{ github.sha }}" >> summary.md
          echo "" >> summary.md

          echo "## Platform Status" >> summary.md
          echo "" >> summary.md

          # Check if reports exist and add status
          if [ -d "compatibility-report-linux" ]; then
            echo "- 🐧 **Linux**: ✅ Compatible" >> summary.md
          else
            echo "- 🐧 **Linux**: ❌ Failed or Skipped" >> summary.md
          fi

          if [ -d "compatibility-report-macos" ]; then
            echo "- 🍎 **macOS**: ✅ Compatible" >> summary.md
          else
            echo "- 🍎 **macOS**: ❌ Failed or Skipped" >> summary.md
          fi

          if [ -d "compatibility-report-windows" ]; then
            echo "- 🪟 **Windows**: ✅ Compatible" >> summary.md
          else
            echo "- 🪟 **Windows**: ❌ Failed or Skipped" >> summary.md
          fi

          echo "" >> summary.md
          echo "## Detailed Reports" >> summary.md
          echo "" >> summary.md

          # Include individual reports if they exist
          for platform in linux macos windows; do
            if [ -d "compatibility-report-$platform" ]; then
              echo "### $platform" >> summary.md
              cat compatibility-report-$platform/compatibility-$platform.md >> summary.md
              echo "" >> summary.md
            fi
          done

      - name: Upload summary report
        uses: actions/upload-artifact@v4
        with:
          name: compatibility-summary
          path: summary.md

      # Post results to PR if this is a PR
      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            if (fs.existsSync('summary.md')) {
              const summary = fs.readFileSync('summary.md', 'utf8');

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            }
